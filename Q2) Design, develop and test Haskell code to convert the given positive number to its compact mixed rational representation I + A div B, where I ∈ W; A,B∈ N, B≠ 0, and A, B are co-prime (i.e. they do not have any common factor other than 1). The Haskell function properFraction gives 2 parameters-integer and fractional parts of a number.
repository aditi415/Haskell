
-- MixedRational.hs

import Data.Ratio (numerator, denominator, (%))
import Data.Function (on)
import Control.Monad (when)

-- Function to convert a positive number to mixed rational form
convertToMixedRational :: Double -> (Integer, Integer, Integer)
convertToMixedRational x
    | x <= 0    = error "Number must be positive"
    | otherwise = 
        let (i, frac) = properFraction x :: (Integer, Double)
            r         = toRational frac
            a         = numerator r
            b         = denominator r
        in (i, a, b)

-- Main function to test the code
main :: IO ()
main = do
    putStrLn "Enter a positive number:"
    input <- getLine
    let x = read input :: Double
    if x <= 0
        then putStrLn "Number must be positive."
        else let (i, a, b) = convertToMixedRational x
             in putStrLn $ "Compact mixed rational form: " ++ show i ++ " + " ++ show a ++ "/" ++ show b
